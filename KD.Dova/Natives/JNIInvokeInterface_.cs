// This file has been machine generated.
// Generated by: KD.Dova.Generator
// For more information go to: https://github.com/Sejoslaw/KD.Dova


using System;
using KD.Dova.Core;
using KD.Dova.Utils;
using System.Security;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace KD.Dova.Proxy.Natives
{
    internal unsafe struct JNIInvokeInterface
    {
        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [SuppressUnmanagedCodeSecurity]
        public delegate IntPtr DestroyJavaVM(IntPtr vm);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [SuppressUnmanagedCodeSecurity]
        public delegate IntPtr AttachCurrentThread(IntPtr vm, out IntPtr penv, JavaVMInitArgs* args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [SuppressUnmanagedCodeSecurity]
        public delegate IntPtr DetachCurrentThread(IntPtr vm);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [SuppressUnmanagedCodeSecurity]
        public delegate IntPtr GetEnv(IntPtr vm, out IntPtr penv, IntPtr version);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [SuppressUnmanagedCodeSecurity]
        public delegate IntPtr AttachCurrentThreadAsDaemon(IntPtr vm, out IntPtr penv, JavaVMInitArgs* args);

    }

    [StructLayout(LayoutKind.Sequential), NativeCppClass]
    public unsafe struct JNIInvokeInterface_
    {
        public IntPtr reserved0;
        public IntPtr reserved1;
        public IntPtr reserved2;

        public IntPtr DestroyJavaVM;
        public IntPtr AttachCurrentThread;
        public IntPtr DetachCurrentThread;
        public IntPtr GetEnv;
        public IntPtr AttachCurrentThreadAsDaemon;
    }

    public unsafe class JavaVirtualMachine
    {
        /* Pointer to this object in unmanaged code. */
        internal IntPtr NativePointer { get; }
        internal JNIInvokeInterface_ InvokeInterface { get; }

        internal JavaVirtualMachine(IntPtr jvm)
        {
            this.NativePointer = jvm;
            this.InvokeInterface = *(*(JavaVM_*)jvm.ToPointer()).functions;
        }

        public IntPtr DestroyJavaVM()
        {
            if (destroyJavaVM == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.InvokeInterface.DestroyJavaVM, ref destroyJavaVM);
            }
            var ret = destroyJavaVM.Invoke(this.NativePointer);
            return ret;
        }

        internal IntPtr AttachCurrentThread(out IntPtr penv, JavaVMInitArgs* args)
        {
            if (attachCurrentThread == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.InvokeInterface.AttachCurrentThread, ref attachCurrentThread);
            }
            var ret = attachCurrentThread.Invoke(this.NativePointer, out penv, args);
            return ret;
        }

        public IntPtr DetachCurrentThread()
        {
            if (detachCurrentThread == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.InvokeInterface.DetachCurrentThread, ref detachCurrentThread);
            }
            var ret = detachCurrentThread.Invoke(this.NativePointer);
            return ret;
        }

        public IntPtr GetEnv(out IntPtr penv, IntPtr version)
        {
            if (getEnv == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.InvokeInterface.GetEnv, ref getEnv);
            }
            var ret = getEnv.Invoke(this.NativePointer, out penv, version);
            return ret;
        }

        internal IntPtr AttachCurrentThreadAsDaemon(out IntPtr penv, JavaVMInitArgs* args)
        {
            if (attachCurrentThreadAsDaemon == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.InvokeInterface.AttachCurrentThreadAsDaemon, ref attachCurrentThreadAsDaemon);
            }
            var ret = attachCurrentThreadAsDaemon.Invoke(this.NativePointer, out penv, args);
            return ret;
        }

        internal JNIInvokeInterface.DestroyJavaVM destroyJavaVM;
        internal JNIInvokeInterface.AttachCurrentThread attachCurrentThread;
        internal JNIInvokeInterface.DetachCurrentThread detachCurrentThread;
        internal JNIInvokeInterface.GetEnv getEnv;
        internal JNIInvokeInterface.AttachCurrentThreadAsDaemon attachCurrentThreadAsDaemon;
    }
}
