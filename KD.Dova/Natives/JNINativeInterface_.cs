// This file has been machine generated.
// Generated by: KD.Dova.Generator
// For more information go to: https://github.com/Sejoslaw/KD.Dova


using KD.Dova.Core;
using KD.Dova.Utils;
using System;
using System.Security;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace KD.Dova.Natives
{
    internal unsafe struct JNINativeInterface
    {
        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetVersion(IntPtr env);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr DefineClass(IntPtr env, IntPtr name, IntPtr loader, IntPtr buf, IntPtr len);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr FindClass(IntPtr env, [MarshalAs(UnmanagedType.LPStr)] string name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr FromReflectedMethod(IntPtr env, IntPtr method);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr FromReflectedField(IntPtr env, IntPtr field);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr ToReflectedMethod(IntPtr env, IntPtr cls, IntPtr methodID, IntPtr isStatic);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetSuperclass(IntPtr env, IntPtr sub);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr IsAssignableFrom(IntPtr env, IntPtr sub, IntPtr sup);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr ToReflectedField(IntPtr env, IntPtr cls, IntPtr fieldID, IntPtr isStatic);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr Throw(IntPtr env, IntPtr obj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr ThrowNew(IntPtr env, IntPtr clazz, IntPtr msg);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr ExceptionOccurred(IntPtr env);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void ExceptionDescribe(IntPtr env);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void ExceptionClear(IntPtr env);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void FatalError(IntPtr env, IntPtr msg);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr PushLocalFrame(IntPtr env, IntPtr capacity);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr PopLocalFrame(IntPtr env, IntPtr result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewGlobalRef(IntPtr env, IntPtr lobj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void DeleteGlobalRef(IntPtr env, IntPtr gref);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void DeleteLocalRef(IntPtr env, IntPtr obj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr IsSameObject(IntPtr env, IntPtr obj1, IntPtr obj2);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewLocalRef(IntPtr env, IntPtr reference);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr EnsureLocalCapacity(IntPtr env, IntPtr capacity);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr AllocObject(IntPtr env, IntPtr clazz);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewObject(IntPtr env, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetObjectClass(IntPtr env, IntPtr obj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr IsInstanceOf(IntPtr env, IntPtr obj, IntPtr clazz);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetMethodID(IntPtr env, IntPtr clazz, [MarshalAs(UnmanagedType.LPStr)] string name, [MarshalAs(UnmanagedType.LPStr)] string sig);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr CallObjectMethod(IntPtr env, IntPtr obj, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate bool CallBooleanMethod(IntPtr env, IntPtr obj, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate byte CallByteMethod(IntPtr env, IntPtr obj, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate ushort CallCharMethod(IntPtr env, IntPtr obj, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate short CallShortMethod(IntPtr env, IntPtr obj, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate int CallIntMethod(IntPtr env, IntPtr obj, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate long CallLongMethod(IntPtr env, IntPtr obj, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate float CallFloatMethod(IntPtr env, IntPtr obj, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate double CallDoubleMethod(IntPtr env, IntPtr obj, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void CallVoidMethod(IntPtr env, IntPtr obj, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr CallNonvirtualObjectMethod(IntPtr env, IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate bool CallNonvirtualBooleanMethod(IntPtr env, IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate byte CallNonvirtualByteMethod(IntPtr env, IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate ushort CallNonvirtualCharMethod(IntPtr env, IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate short CallNonvirtualShortMethod(IntPtr env, IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate int CallNonvirtualIntMethod(IntPtr env, IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate long CallNonvirtualLongMethod(IntPtr env, IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate float CallNonvirtualFloatMethod(IntPtr env, IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate double CallNonvirtualDoubleMethod(IntPtr env, IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void CallNonvirtualVoidMethod(IntPtr env, IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetFieldID(IntPtr env, IntPtr clazz, [MarshalAs(UnmanagedType.LPStr)] string name, [MarshalAs(UnmanagedType.LPStr)] string sig);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetObjectField(IntPtr env, IntPtr obj, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate bool GetBooleanField(IntPtr env, IntPtr obj, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate byte GetByteField(IntPtr env, IntPtr obj, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate ushort GetCharField(IntPtr env, IntPtr obj, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate short GetShortField(IntPtr env, IntPtr obj, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate int GetIntField(IntPtr env, IntPtr obj, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate long GetLongField(IntPtr env, IntPtr obj, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate float GetFloatField(IntPtr env, IntPtr obj, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate double GetDoubleField(IntPtr env, IntPtr obj, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetObjectField(IntPtr env, IntPtr obj, IntPtr fieldID, IntPtr val);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetBooleanField(IntPtr env, IntPtr obj, IntPtr fieldID, bool val);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetByteField(IntPtr env, IntPtr obj, IntPtr fieldID, byte val);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetCharField(IntPtr env, IntPtr obj, IntPtr fieldID, ushort val);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetShortField(IntPtr env, IntPtr obj, IntPtr fieldID, short val);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetIntField(IntPtr env, IntPtr obj, IntPtr fieldID, int val);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetLongField(IntPtr env, IntPtr obj, IntPtr fieldID, long val);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetFloatField(IntPtr env, IntPtr obj, IntPtr fieldID, float val);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetDoubleField(IntPtr env, IntPtr obj, IntPtr fieldID, double val);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetStaticMethodID(IntPtr env, IntPtr clazz, [MarshalAs(UnmanagedType.LPStr)] string name, [MarshalAs(UnmanagedType.LPStr)] string sig);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr CallStaticObjectMethod(IntPtr env, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate bool CallStaticBooleanMethod(IntPtr env, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate byte CallStaticByteMethod(IntPtr env, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate ushort CallStaticCharMethod(IntPtr env, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate short CallStaticShortMethod(IntPtr env, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate int CallStaticIntMethod(IntPtr env, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate long CallStaticLongMethod(IntPtr env, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate float CallStaticFloatMethod(IntPtr env, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate double CallStaticDoubleMethod(IntPtr env, IntPtr clazz, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void CallStaticVoidMethod(IntPtr env, IntPtr cls, IntPtr methodID, params NativeValue[] args);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetStaticFieldID(IntPtr env, IntPtr clazz, [MarshalAs(UnmanagedType.LPStr)] string name, [MarshalAs(UnmanagedType.LPStr)] string sig);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetStaticObjectField(IntPtr env, IntPtr clazz, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate bool GetStaticBooleanField(IntPtr env, IntPtr clazz, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate byte GetStaticByteField(IntPtr env, IntPtr clazz, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate ushort GetStaticCharField(IntPtr env, IntPtr clazz, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate short GetStaticShortField(IntPtr env, IntPtr clazz, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate int GetStaticIntField(IntPtr env, IntPtr clazz, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate long GetStaticLongField(IntPtr env, IntPtr clazz, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate float GetStaticFloatField(IntPtr env, IntPtr clazz, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate double GetStaticDoubleField(IntPtr env, IntPtr clazz, IntPtr fieldID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetStaticObjectField(IntPtr env, IntPtr clazz, IntPtr fieldID, IntPtr value);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetStaticBooleanField(IntPtr env, IntPtr clazz, IntPtr fieldID, bool value);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetStaticByteField(IntPtr env, IntPtr clazz, IntPtr fieldID, byte value);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetStaticCharField(IntPtr env, IntPtr clazz, IntPtr fieldID, ushort value);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetStaticShortField(IntPtr env, IntPtr clazz, IntPtr fieldID, short value);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetStaticIntField(IntPtr env, IntPtr clazz, IntPtr fieldID, int value);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetStaticLongField(IntPtr env, IntPtr clazz, IntPtr fieldID, long value);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetStaticFloatField(IntPtr env, IntPtr clazz, IntPtr fieldID, float value);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetStaticDoubleField(IntPtr env, IntPtr clazz, IntPtr fieldID, double value);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewString(IntPtr env, IntPtr unicode, IntPtr len);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate int GetStringLength(IntPtr env, IntPtr str);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetStringChars(IntPtr env, IntPtr str, byte* isCopy);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void ReleaseStringChars(IntPtr env, IntPtr str, IntPtr chars);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewStringUTF(IntPtr env, IntPtr utf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate int GetStringUTFLength(IntPtr env, IntPtr str);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetStringUTFChars(IntPtr env, IntPtr str, byte* isCopy);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void ReleaseStringUTFChars(IntPtr env, IntPtr str, IntPtr chars);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate int GetArrayLength(IntPtr env, IntPtr array);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewObjectArray(IntPtr env, IntPtr len, IntPtr clazz, IntPtr init);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetObjectArrayElement(IntPtr env, IntPtr array, IntPtr index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetObjectArrayElement(IntPtr env, IntPtr array, IntPtr index, IntPtr val);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewBooleanArray(IntPtr env, int len);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewByteArray(IntPtr env, int len);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewCharArray(IntPtr env, int len);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewShortArray(IntPtr env, int len);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewIntArray(IntPtr env, int len);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewLongArray(IntPtr env, int len);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewFloatArray(IntPtr env, int len);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewDoubleArray(IntPtr env, int len);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetBooleanArrayElements(IntPtr env, IntPtr array, byte* isCopy);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetByteArrayElements(IntPtr env, IntPtr array, byte* isCopy);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetCharArrayElements(IntPtr env, IntPtr array, byte* isCopy);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetShortArrayElements(IntPtr env, IntPtr array, byte* isCopy);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetIntArrayElements(IntPtr env, IntPtr array, byte* isCopy);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetLongArrayElements(IntPtr env, IntPtr array, byte* isCopy);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetFloatArrayElements(IntPtr env, IntPtr array, byte* isCopy);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetDoubleArrayElements(IntPtr env, IntPtr array, byte* isCopy);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void ReleaseBooleanArrayElements(IntPtr env, IntPtr array, bool* elems, IntPtr mode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void ReleaseByteArrayElements(IntPtr env, IntPtr array, byte* elems, IntPtr mode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void ReleaseCharArrayElements(IntPtr env, IntPtr array, ushort* elems, IntPtr mode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void ReleaseShortArrayElements(IntPtr env, IntPtr array, short* elems, IntPtr mode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void ReleaseIntArrayElements(IntPtr env, IntPtr array, int* elems, IntPtr mode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void ReleaseLongArrayElements(IntPtr env, IntPtr array, long* elems, IntPtr mode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void ReleaseFloatArrayElements(IntPtr env, IntPtr array, float* elems, IntPtr mode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void ReleaseDoubleArrayElements(IntPtr env, IntPtr array, double* elems, IntPtr mode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void GetBooleanArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr l, IntPtr buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void GetByteArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr len, IntPtr buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void GetCharArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr len, IntPtr buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void GetShortArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr len, IntPtr buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void GetIntArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr len, IntPtr buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void GetLongArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr len, IntPtr buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void GetFloatArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr len, IntPtr buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void GetDoubleArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr len, IntPtr buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetBooleanArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr l, bool buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetByteArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr len, byte buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetCharArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr len, ushort buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetShortArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr len, short buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetIntArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr len, int buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetLongArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr len, long buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetFloatArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr len, float buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void SetDoubleArrayRegion(IntPtr env, IntPtr array, IntPtr start, IntPtr len, double buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr RegisterNatives(IntPtr env, IntPtr clazz, IntPtr methods, IntPtr nMethods);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr UnregisterNatives(IntPtr env, IntPtr clazz);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr MonitorEnter(IntPtr env, IntPtr obj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr MonitorExit(IntPtr env, IntPtr obj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetJavaVM(IntPtr env, out IntPtr vm);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void GetStringRegion(IntPtr env, IntPtr str, IntPtr start, IntPtr len, IntPtr buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void GetStringUTFRegion(IntPtr env, IntPtr str, IntPtr start, IntPtr len, IntPtr buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void GetPrimitiveArrayCritical(IntPtr env, IntPtr array, byte* isCopy);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void ReleasePrimitiveArrayCritical(IntPtr env, IntPtr array, IntPtr carray, IntPtr mode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetStringCritical(IntPtr env, IntPtr str, byte* isCopy);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void ReleaseStringCritical(IntPtr env, IntPtr str, IntPtr cstring);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewWeakGlobalRef(IntPtr env, IntPtr obj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void DeleteWeakGlobalRef(IntPtr env, IntPtr reference);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr ExceptionCheck(IntPtr env);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr NewDirectByteBuffer(IntPtr env, IntPtr address, byte capacity);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void* GetDirectBufferAddress(IntPtr env, IntPtr buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetDirectBufferCapacity(IntPtr env, IntPtr buf);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate IntPtr GetObjectRefType(IntPtr env, IntPtr obj);

    }

    [StructLayout(LayoutKind.Sequential), NativeCppClass]
    internal unsafe struct JNINativeInterface_
    {
        public IntPtr reserved0;
        public IntPtr reserved1;
        public IntPtr reserved2;
        public IntPtr reserved3;

        public IntPtr GetVersion;
        public IntPtr DefineClass;
        public IntPtr FindClass;
        public IntPtr FromReflectedMethod;
        public IntPtr FromReflectedField;
        public IntPtr ToReflectedMethod;
        public IntPtr GetSuperclass;
        public IntPtr IsAssignableFrom;
        public IntPtr ToReflectedField;
        public IntPtr Throw;
        public IntPtr ThrowNew;
        public IntPtr ExceptionOccurred;
        public IntPtr ExceptionDescribe;
        public IntPtr ExceptionClear;
        public IntPtr FatalError;
        public IntPtr PushLocalFrame;
        public IntPtr PopLocalFrame;
        public IntPtr NewGlobalRef;
        public IntPtr DeleteGlobalRef;
        public IntPtr DeleteLocalRef;
        public IntPtr IsSameObject;
        public IntPtr NewLocalRef;
        public IntPtr EnsureLocalCapacity;
        public IntPtr AllocObject;
        public IntPtr NewObject;
        public IntPtr GetObjectClass;
        public IntPtr IsInstanceOf;
        public IntPtr GetMethodID;
        public IntPtr CallObjectMethod;
        public IntPtr CallBooleanMethod;
        public IntPtr CallByteMethod;
        public IntPtr CallCharMethod;
        public IntPtr CallShortMethod;
        public IntPtr CallIntMethod;
        public IntPtr CallLongMethod;
        public IntPtr CallFloatMethod;
        public IntPtr CallDoubleMethod;
        public IntPtr CallVoidMethod;
        public IntPtr CallNonvirtualObjectMethod;
        public IntPtr CallNonvirtualBooleanMethod;
        public IntPtr CallNonvirtualByteMethod;
        public IntPtr CallNonvirtualCharMethod;
        public IntPtr CallNonvirtualShortMethod;
        public IntPtr CallNonvirtualIntMethod;
        public IntPtr CallNonvirtualLongMethod;
        public IntPtr CallNonvirtualFloatMethod;
        public IntPtr CallNonvirtualDoubleMethod;
        public IntPtr CallNonvirtualVoidMethod;
        public IntPtr GetFieldID;
        public IntPtr GetObjectField;
        public IntPtr GetBooleanField;
        public IntPtr GetByteField;
        public IntPtr GetCharField;
        public IntPtr GetShortField;
        public IntPtr GetIntField;
        public IntPtr GetLongField;
        public IntPtr GetFloatField;
        public IntPtr GetDoubleField;
        public IntPtr SetObjectField;
        public IntPtr SetBooleanField;
        public IntPtr SetByteField;
        public IntPtr SetCharField;
        public IntPtr SetShortField;
        public IntPtr SetIntField;
        public IntPtr SetLongField;
        public IntPtr SetFloatField;
        public IntPtr SetDoubleField;
        public IntPtr GetStaticMethodID;
        public IntPtr CallStaticObjectMethod;
        public IntPtr CallStaticBooleanMethod;
        public IntPtr CallStaticByteMethod;
        public IntPtr CallStaticCharMethod;
        public IntPtr CallStaticShortMethod;
        public IntPtr CallStaticIntMethod;
        public IntPtr CallStaticLongMethod;
        public IntPtr CallStaticFloatMethod;
        public IntPtr CallStaticDoubleMethod;
        public IntPtr CallStaticVoidMethod;
        public IntPtr GetStaticFieldID;
        public IntPtr GetStaticObjectField;
        public IntPtr GetStaticBooleanField;
        public IntPtr GetStaticByteField;
        public IntPtr GetStaticCharField;
        public IntPtr GetStaticShortField;
        public IntPtr GetStaticIntField;
        public IntPtr GetStaticLongField;
        public IntPtr GetStaticFloatField;
        public IntPtr GetStaticDoubleField;
        public IntPtr SetStaticObjectField;
        public IntPtr SetStaticBooleanField;
        public IntPtr SetStaticByteField;
        public IntPtr SetStaticCharField;
        public IntPtr SetStaticShortField;
        public IntPtr SetStaticIntField;
        public IntPtr SetStaticLongField;
        public IntPtr SetStaticFloatField;
        public IntPtr SetStaticDoubleField;
        public IntPtr NewString;
        public IntPtr GetStringLength;
        public IntPtr GetStringChars;
        public IntPtr ReleaseStringChars;
        public IntPtr NewStringUTF;
        public IntPtr GetStringUTFLength;
        public IntPtr GetStringUTFChars;
        public IntPtr ReleaseStringUTFChars;
        public IntPtr GetArrayLength;
        public IntPtr NewObjectArray;
        public IntPtr GetObjectArrayElement;
        public IntPtr SetObjectArrayElement;
        public IntPtr NewBooleanArray;
        public IntPtr NewByteArray;
        public IntPtr NewCharArray;
        public IntPtr NewShortArray;
        public IntPtr NewIntArray;
        public IntPtr NewLongArray;
        public IntPtr NewFloatArray;
        public IntPtr NewDoubleArray;
        public IntPtr GetBooleanArrayElements;
        public IntPtr GetByteArrayElements;
        public IntPtr GetCharArrayElements;
        public IntPtr GetShortArrayElements;
        public IntPtr GetIntArrayElements;
        public IntPtr GetLongArrayElements;
        public IntPtr GetFloatArrayElements;
        public IntPtr GetDoubleArrayElements;
        public IntPtr ReleaseBooleanArrayElements;
        public IntPtr ReleaseByteArrayElements;
        public IntPtr ReleaseCharArrayElements;
        public IntPtr ReleaseShortArrayElements;
        public IntPtr ReleaseIntArrayElements;
        public IntPtr ReleaseLongArrayElements;
        public IntPtr ReleaseFloatArrayElements;
        public IntPtr ReleaseDoubleArrayElements;
        public IntPtr GetBooleanArrayRegion;
        public IntPtr GetByteArrayRegion;
        public IntPtr GetCharArrayRegion;
        public IntPtr GetShortArrayRegion;
        public IntPtr GetIntArrayRegion;
        public IntPtr GetLongArrayRegion;
        public IntPtr GetFloatArrayRegion;
        public IntPtr GetDoubleArrayRegion;
        public IntPtr SetBooleanArrayRegion;
        public IntPtr SetByteArrayRegion;
        public IntPtr SetCharArrayRegion;
        public IntPtr SetShortArrayRegion;
        public IntPtr SetIntArrayRegion;
        public IntPtr SetLongArrayRegion;
        public IntPtr SetFloatArrayRegion;
        public IntPtr SetDoubleArrayRegion;
        public IntPtr RegisterNatives;
        public IntPtr UnregisterNatives;
        public IntPtr MonitorEnter;
        public IntPtr MonitorExit;
        public IntPtr GetJavaVM;
        public IntPtr GetStringRegion;
        public IntPtr GetStringUTFRegion;
        public IntPtr GetPrimitiveArrayCritical;
        public IntPtr ReleasePrimitiveArrayCritical;
        public IntPtr GetStringCritical;
        public IntPtr ReleaseStringCritical;
        public IntPtr NewWeakGlobalRef;
        public IntPtr DeleteWeakGlobalRef;
        public IntPtr ExceptionCheck;
        public IntPtr NewDirectByteBuffer;
        public IntPtr GetDirectBufferAddress;
        public IntPtr GetDirectBufferCapacity;
        public IntPtr GetObjectRefType;
    }

    internal unsafe class JNIEnvironment
    {
        /* Pointer to this object in unmanaged code. */
        internal IntPtr NativePointer { get; }
        internal JNINativeInterface_ NativeInterface { get; }

        internal JNIEnvironment(IntPtr jniEnv)
        {
            this.NativePointer = jniEnv;
            this.NativeInterface = *(*(JNIEnv_*) jniEnv.ToPointer()).functions;
        }

        public IntPtr GetVersion()
        {
            if (getVersion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetVersion, ref getVersion);
            }
            var ret = getVersion.Invoke(this.NativePointer);
            return ret;
        }

        public IntPtr DefineClass(IntPtr name, IntPtr loader, IntPtr buf, IntPtr len)
        {
            if (defineClass == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.DefineClass, ref defineClass);
            }
            var ret = defineClass.Invoke(this.NativePointer, name, loader, buf, len);
            return ret;
        }

        public IntPtr FindClass([MarshalAs(UnmanagedType.LPStr)] string name)
        {
            if (findClass == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.FindClass, ref findClass);
            }
            var ret = findClass.Invoke(this.NativePointer, name);
            return ret;
        }

        public IntPtr FromReflectedMethod(IntPtr method)
        {
            if (fromReflectedMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.FromReflectedMethod, ref fromReflectedMethod);
            }
            var ret = fromReflectedMethod.Invoke(this.NativePointer, method);
            return ret;
        }

        public IntPtr FromReflectedField(IntPtr field)
        {
            if (fromReflectedField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.FromReflectedField, ref fromReflectedField);
            }
            var ret = fromReflectedField.Invoke(this.NativePointer, field);
            return ret;
        }

        public IntPtr ToReflectedMethod(IntPtr cls, IntPtr methodID, IntPtr isStatic)
        {
            if (toReflectedMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ToReflectedMethod, ref toReflectedMethod);
            }
            var ret = toReflectedMethod.Invoke(this.NativePointer, cls, methodID, isStatic);
            return ret;
        }

        public IntPtr GetSuperclass(IntPtr sub)
        {
            if (getSuperclass == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetSuperclass, ref getSuperclass);
            }
            var ret = getSuperclass.Invoke(this.NativePointer, sub);
            return ret;
        }

        public IntPtr IsAssignableFrom(IntPtr sub, IntPtr sup)
        {
            if (isAssignableFrom == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.IsAssignableFrom, ref isAssignableFrom);
            }
            var ret = isAssignableFrom.Invoke(this.NativePointer, sub, sup);
            return ret;
        }

        public IntPtr ToReflectedField(IntPtr cls, IntPtr fieldID, IntPtr isStatic)
        {
            if (toReflectedField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ToReflectedField, ref toReflectedField);
            }
            var ret = toReflectedField.Invoke(this.NativePointer, cls, fieldID, isStatic);
            return ret;
        }

        public IntPtr Throw(IntPtr obj)
        {
            if (_throw == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.Throw, ref _throw);
            }
            var ret = _throw.Invoke(this.NativePointer, obj);
            return ret;
        }

        public IntPtr ThrowNew(IntPtr clazz, IntPtr msg)
        {
            if (throwNew == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ThrowNew, ref throwNew);
            }
            var ret = throwNew.Invoke(this.NativePointer, clazz, msg);
            return ret;
        }

        public IntPtr ExceptionOccurred()
        {
            if (exceptionOccurred == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ExceptionOccurred, ref exceptionOccurred);
            }
            var ret = exceptionOccurred.Invoke(this.NativePointer);
            return ret;
        }

        public void ExceptionDescribe()
        {
            if (exceptionDescribe == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ExceptionDescribe, ref exceptionDescribe);
            }
            exceptionDescribe.Invoke(this.NativePointer);
        }

        public void ExceptionClear()
        {
            if (exceptionClear == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ExceptionClear, ref exceptionClear);
            }
            exceptionClear.Invoke(this.NativePointer);
        }

        public void FatalError(IntPtr msg)
        {
            if (fatalError == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.FatalError, ref fatalError);
            }
            fatalError.Invoke(this.NativePointer, msg);
        }

        public IntPtr PushLocalFrame(IntPtr capacity)
        {
            if (pushLocalFrame == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.PushLocalFrame, ref pushLocalFrame);
            }
            var ret = pushLocalFrame.Invoke(this.NativePointer, capacity);
            return ret;
        }

        public IntPtr PopLocalFrame(IntPtr result)
        {
            if (popLocalFrame == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.PopLocalFrame, ref popLocalFrame);
            }
            var ret = popLocalFrame.Invoke(this.NativePointer, result);
            return ret;
        }

        public IntPtr NewGlobalRef(IntPtr lobj)
        {
            if (newGlobalRef == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewGlobalRef, ref newGlobalRef);
            }
            var ret = newGlobalRef.Invoke(this.NativePointer, lobj);
            return ret;
        }

        public void DeleteGlobalRef(IntPtr gref)
        {
            if (deleteGlobalRef == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.DeleteGlobalRef, ref deleteGlobalRef);
            }
            deleteGlobalRef.Invoke(this.NativePointer, gref);
        }

        public void DeleteLocalRef(IntPtr obj)
        {
            if (deleteLocalRef == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.DeleteLocalRef, ref deleteLocalRef);
            }
            deleteLocalRef.Invoke(this.NativePointer, obj);
        }

        public IntPtr IsSameObject(IntPtr obj1, IntPtr obj2)
        {
            if (isSameObject == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.IsSameObject, ref isSameObject);
            }
            var ret = isSameObject.Invoke(this.NativePointer, obj1, obj2);
            return ret;
        }

        public IntPtr NewLocalRef(IntPtr reference)
        {
            if (newLocalRef == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewLocalRef, ref newLocalRef);
            }
            var ret = newLocalRef.Invoke(this.NativePointer, reference);
            return ret;
        }

        public IntPtr EnsureLocalCapacity(IntPtr capacity)
        {
            if (ensureLocalCapacity == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.EnsureLocalCapacity, ref ensureLocalCapacity);
            }
            var ret = ensureLocalCapacity.Invoke(this.NativePointer, capacity);
            return ret;
        }

        public IntPtr AllocObject(IntPtr clazz)
        {
            if (allocObject == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.AllocObject, ref allocObject);
            }
            var ret = allocObject.Invoke(this.NativePointer, clazz);
            return ret;
        }

        public IntPtr NewObject(IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (newObject == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewObject, ref newObject);
            }
            var ret = newObject.Invoke(this.NativePointer, clazz, methodID, args);
            return ret;
        }

        public IntPtr GetObjectClass(IntPtr obj)
        {
            if (getObjectClass == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetObjectClass, ref getObjectClass);
            }
            var ret = getObjectClass.Invoke(this.NativePointer, obj);
            return ret;
        }

        public IntPtr IsInstanceOf(IntPtr obj, IntPtr clazz)
        {
            if (isInstanceOf == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.IsInstanceOf, ref isInstanceOf);
            }
            var ret = isInstanceOf.Invoke(this.NativePointer, obj, clazz);
            return ret;
        }

        public IntPtr GetMethodID(IntPtr clazz, [MarshalAs(UnmanagedType.LPStr)] string name, [MarshalAs(UnmanagedType.LPStr)] string sig)
        {
            if (getMethodID == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetMethodID, ref getMethodID);
            }
            var ret = getMethodID.Invoke(this.NativePointer, clazz, name, sig);
            return ret;
        }

        public IntPtr CallObjectMethod(IntPtr obj, IntPtr methodID, params NativeValue[] args)
        {
            if (callObjectMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallObjectMethod, ref callObjectMethod);
            }
            var ret = callObjectMethod.Invoke(this.NativePointer, obj, methodID, args);
            return ret;
        }

        public bool CallBooleanMethod(IntPtr obj, IntPtr methodID, params NativeValue[] args)
        {
            if (callBooleanMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallBooleanMethod, ref callBooleanMethod);
            }
            var ret = callBooleanMethod.Invoke(this.NativePointer, obj, methodID, args);
            return ret;
        }

        public byte CallByteMethod(IntPtr obj, IntPtr methodID, params NativeValue[] args)
        {
            if (callByteMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallByteMethod, ref callByteMethod);
            }
            var ret = callByteMethod.Invoke(this.NativePointer, obj, methodID, args);
            return ret;
        }

        public ushort CallCharMethod(IntPtr obj, IntPtr methodID, params NativeValue[] args)
        {
            if (callCharMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallCharMethod, ref callCharMethod);
            }
            var ret = callCharMethod.Invoke(this.NativePointer, obj, methodID, args);
            return ret;
        }

        public short CallShortMethod(IntPtr obj, IntPtr methodID, params NativeValue[] args)
        {
            if (callShortMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallShortMethod, ref callShortMethod);
            }
            var ret = callShortMethod.Invoke(this.NativePointer, obj, methodID, args);
            return ret;
        }

        public int CallIntMethod(IntPtr obj, IntPtr methodID, params NativeValue[] args)
        {
            if (callIntMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallIntMethod, ref callIntMethod);
            }
            var ret = callIntMethod.Invoke(this.NativePointer, obj, methodID, args);
            return ret;
        }

        public long CallLongMethod(IntPtr obj, IntPtr methodID, params NativeValue[] args)
        {
            if (callLongMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallLongMethod, ref callLongMethod);
            }
            var ret = callLongMethod.Invoke(this.NativePointer, obj, methodID, args);
            return ret;
        }

        public float CallFloatMethod(IntPtr obj, IntPtr methodID, params NativeValue[] args)
        {
            if (callFloatMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallFloatMethod, ref callFloatMethod);
            }
            var ret = callFloatMethod.Invoke(this.NativePointer, obj, methodID, args);
            return ret;
        }

        public double CallDoubleMethod(IntPtr obj, IntPtr methodID, params NativeValue[] args)
        {
            if (callDoubleMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallDoubleMethod, ref callDoubleMethod);
            }
            var ret = callDoubleMethod.Invoke(this.NativePointer, obj, methodID, args);
            return ret;
        }

        public void CallVoidMethod(IntPtr obj, IntPtr methodID, params NativeValue[] args)
        {
            if (callVoidMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallVoidMethod, ref callVoidMethod);
            }
            callVoidMethod.Invoke(this.NativePointer, obj, methodID, args);
        }

        public IntPtr CallNonvirtualObjectMethod(IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callNonvirtualObjectMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallNonvirtualObjectMethod, ref callNonvirtualObjectMethod);
            }
            var ret = callNonvirtualObjectMethod.Invoke(this.NativePointer, obj, clazz, methodID, args);
            return ret;
        }

        public bool CallNonvirtualBooleanMethod(IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callNonvirtualBooleanMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallNonvirtualBooleanMethod, ref callNonvirtualBooleanMethod);
            }
            var ret = callNonvirtualBooleanMethod.Invoke(this.NativePointer, obj, clazz, methodID, args);
            return ret;
        }

        public byte CallNonvirtualByteMethod(IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callNonvirtualByteMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallNonvirtualByteMethod, ref callNonvirtualByteMethod);
            }
            var ret = callNonvirtualByteMethod.Invoke(this.NativePointer, obj, clazz, methodID, args);
            return ret;
        }

        public ushort CallNonvirtualCharMethod(IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callNonvirtualCharMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallNonvirtualCharMethod, ref callNonvirtualCharMethod);
            }
            var ret = callNonvirtualCharMethod.Invoke(this.NativePointer, obj, clazz, methodID, args);
            return ret;
        }

        public short CallNonvirtualShortMethod(IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callNonvirtualShortMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallNonvirtualShortMethod, ref callNonvirtualShortMethod);
            }
            var ret = callNonvirtualShortMethod.Invoke(this.NativePointer, obj, clazz, methodID, args);
            return ret;
        }

        public int CallNonvirtualIntMethod(IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callNonvirtualIntMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallNonvirtualIntMethod, ref callNonvirtualIntMethod);
            }
            var ret = callNonvirtualIntMethod.Invoke(this.NativePointer, obj, clazz, methodID, args);
            return ret;
        }

        public long CallNonvirtualLongMethod(IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callNonvirtualLongMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallNonvirtualLongMethod, ref callNonvirtualLongMethod);
            }
            var ret = callNonvirtualLongMethod.Invoke(this.NativePointer, obj, clazz, methodID, args);
            return ret;
        }

        public float CallNonvirtualFloatMethod(IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callNonvirtualFloatMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallNonvirtualFloatMethod, ref callNonvirtualFloatMethod);
            }
            var ret = callNonvirtualFloatMethod.Invoke(this.NativePointer, obj, clazz, methodID, args);
            return ret;
        }

        public double CallNonvirtualDoubleMethod(IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callNonvirtualDoubleMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallNonvirtualDoubleMethod, ref callNonvirtualDoubleMethod);
            }
            var ret = callNonvirtualDoubleMethod.Invoke(this.NativePointer, obj, clazz, methodID, args);
            return ret;
        }

        public void CallNonvirtualVoidMethod(IntPtr obj, IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callNonvirtualVoidMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallNonvirtualVoidMethod, ref callNonvirtualVoidMethod);
            }
            callNonvirtualVoidMethod.Invoke(this.NativePointer, obj, clazz, methodID, args);
        }

        public IntPtr GetFieldID(IntPtr clazz, [MarshalAs(UnmanagedType.LPStr)] string name, [MarshalAs(UnmanagedType.LPStr)] string sig)
        {
            if (getFieldID == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetFieldID, ref getFieldID);
            }
            var ret = getFieldID.Invoke(this.NativePointer, clazz, name, sig);
            return ret;
        }

        public IntPtr GetObjectField(IntPtr obj, IntPtr fieldID)
        {
            if (getObjectField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetObjectField, ref getObjectField);
            }
            var ret = getObjectField.Invoke(this.NativePointer, obj, fieldID);
            return ret;
        }

        public bool GetBooleanField(IntPtr obj, IntPtr fieldID)
        {
            if (getBooleanField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetBooleanField, ref getBooleanField);
            }
            var ret = getBooleanField.Invoke(this.NativePointer, obj, fieldID);
            return ret;
        }

        public byte GetByteField(IntPtr obj, IntPtr fieldID)
        {
            if (getByteField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetByteField, ref getByteField);
            }
            var ret = getByteField.Invoke(this.NativePointer, obj, fieldID);
            return ret;
        }

        public ushort GetCharField(IntPtr obj, IntPtr fieldID)
        {
            if (getCharField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetCharField, ref getCharField);
            }
            var ret = getCharField.Invoke(this.NativePointer, obj, fieldID);
            return ret;
        }

        public short GetShortField(IntPtr obj, IntPtr fieldID)
        {
            if (getShortField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetShortField, ref getShortField);
            }
            var ret = getShortField.Invoke(this.NativePointer, obj, fieldID);
            return ret;
        }

        public int GetIntField(IntPtr obj, IntPtr fieldID)
        {
            if (getIntField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetIntField, ref getIntField);
            }
            var ret = getIntField.Invoke(this.NativePointer, obj, fieldID);
            return ret;
        }

        public long GetLongField(IntPtr obj, IntPtr fieldID)
        {
            if (getLongField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetLongField, ref getLongField);
            }
            var ret = getLongField.Invoke(this.NativePointer, obj, fieldID);
            return ret;
        }

        public float GetFloatField(IntPtr obj, IntPtr fieldID)
        {
            if (getFloatField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetFloatField, ref getFloatField);
            }
            var ret = getFloatField.Invoke(this.NativePointer, obj, fieldID);
            return ret;
        }

        public double GetDoubleField(IntPtr obj, IntPtr fieldID)
        {
            if (getDoubleField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetDoubleField, ref getDoubleField);
            }
            var ret = getDoubleField.Invoke(this.NativePointer, obj, fieldID);
            return ret;
        }

        public void SetObjectField(IntPtr obj, IntPtr fieldID, IntPtr val)
        {
            if (setObjectField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetObjectField, ref setObjectField);
            }
            setObjectField.Invoke(this.NativePointer, obj, fieldID, val);
        }

        public void SetBooleanField(IntPtr obj, IntPtr fieldID, bool val)
        {
            if (setBooleanField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetBooleanField, ref setBooleanField);
            }
            setBooleanField.Invoke(this.NativePointer, obj, fieldID, val);
        }

        public void SetByteField(IntPtr obj, IntPtr fieldID, byte val)
        {
            if (setByteField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetByteField, ref setByteField);
            }
            setByteField.Invoke(this.NativePointer, obj, fieldID, val);
        }

        public void SetCharField(IntPtr obj, IntPtr fieldID, ushort val)
        {
            if (setCharField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetCharField, ref setCharField);
            }
            setCharField.Invoke(this.NativePointer, obj, fieldID, val);
        }

        public void SetShortField(IntPtr obj, IntPtr fieldID, short val)
        {
            if (setShortField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetShortField, ref setShortField);
            }
            setShortField.Invoke(this.NativePointer, obj, fieldID, val);
        }

        public void SetIntField(IntPtr obj, IntPtr fieldID, int val)
        {
            if (setIntField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetIntField, ref setIntField);
            }
            setIntField.Invoke(this.NativePointer, obj, fieldID, val);
        }

        public void SetLongField(IntPtr obj, IntPtr fieldID, long val)
        {
            if (setLongField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetLongField, ref setLongField);
            }
            setLongField.Invoke(this.NativePointer, obj, fieldID, val);
        }

        public void SetFloatField(IntPtr obj, IntPtr fieldID, float val)
        {
            if (setFloatField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetFloatField, ref setFloatField);
            }
            setFloatField.Invoke(this.NativePointer, obj, fieldID, val);
        }

        public void SetDoubleField(IntPtr obj, IntPtr fieldID, double val)
        {
            if (setDoubleField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetDoubleField, ref setDoubleField);
            }
            setDoubleField.Invoke(this.NativePointer, obj, fieldID, val);
        }

        public IntPtr GetStaticMethodID(IntPtr clazz, [MarshalAs(UnmanagedType.LPStr)] string name, [MarshalAs(UnmanagedType.LPStr)] string sig)
        {
            if (getStaticMethodID == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStaticMethodID, ref getStaticMethodID);
            }
            var ret = getStaticMethodID.Invoke(this.NativePointer, clazz, name, sig);
            return ret;
        }

        public IntPtr CallStaticObjectMethod(IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callStaticObjectMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallStaticObjectMethod, ref callStaticObjectMethod);
            }
            var ret = callStaticObjectMethod.Invoke(this.NativePointer, clazz, methodID, args);
            return ret;
        }

        public bool CallStaticBooleanMethod(IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callStaticBooleanMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallStaticBooleanMethod, ref callStaticBooleanMethod);
            }
            var ret = callStaticBooleanMethod.Invoke(this.NativePointer, clazz, methodID, args);
            return ret;
        }

        public byte CallStaticByteMethod(IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callStaticByteMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallStaticByteMethod, ref callStaticByteMethod);
            }
            var ret = callStaticByteMethod.Invoke(this.NativePointer, clazz, methodID, args);
            return ret;
        }

        public ushort CallStaticCharMethod(IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callStaticCharMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallStaticCharMethod, ref callStaticCharMethod);
            }
            var ret = callStaticCharMethod.Invoke(this.NativePointer, clazz, methodID, args);
            return ret;
        }

        public short CallStaticShortMethod(IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callStaticShortMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallStaticShortMethod, ref callStaticShortMethod);
            }
            var ret = callStaticShortMethod.Invoke(this.NativePointer, clazz, methodID, args);
            return ret;
        }

        public int CallStaticIntMethod(IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callStaticIntMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallStaticIntMethod, ref callStaticIntMethod);
            }
            var ret = callStaticIntMethod.Invoke(this.NativePointer, clazz, methodID, args);
            return ret;
        }

        public long CallStaticLongMethod(IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callStaticLongMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallStaticLongMethod, ref callStaticLongMethod);
            }
            var ret = callStaticLongMethod.Invoke(this.NativePointer, clazz, methodID, args);
            return ret;
        }

        public float CallStaticFloatMethod(IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callStaticFloatMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallStaticFloatMethod, ref callStaticFloatMethod);
            }
            var ret = callStaticFloatMethod.Invoke(this.NativePointer, clazz, methodID, args);
            return ret;
        }

        public double CallStaticDoubleMethod(IntPtr clazz, IntPtr methodID, params NativeValue[] args)
        {
            if (callStaticDoubleMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallStaticDoubleMethod, ref callStaticDoubleMethod);
            }
            var ret = callStaticDoubleMethod.Invoke(this.NativePointer, clazz, methodID, args);
            return ret;
        }

        public void CallStaticVoidMethod(IntPtr cls, IntPtr methodID, params NativeValue[] args)
        {
            if (callStaticVoidMethod == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.CallStaticVoidMethod, ref callStaticVoidMethod);
            }
            callStaticVoidMethod.Invoke(this.NativePointer, cls, methodID, args);
        }

        public IntPtr GetStaticFieldID(IntPtr clazz, [MarshalAs(UnmanagedType.LPStr)] string name, [MarshalAs(UnmanagedType.LPStr)] string sig)
        {
            if (getStaticFieldID == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStaticFieldID, ref getStaticFieldID);
            }
            var ret = getStaticFieldID.Invoke(this.NativePointer, clazz, name, sig);
            return ret;
        }

        public IntPtr GetStaticObjectField(IntPtr clazz, IntPtr fieldID)
        {
            if (getStaticObjectField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStaticObjectField, ref getStaticObjectField);
            }
            var ret = getStaticObjectField.Invoke(this.NativePointer, clazz, fieldID);
            return ret;
        }

        public bool GetStaticBooleanField(IntPtr clazz, IntPtr fieldID)
        {
            if (getStaticBooleanField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStaticBooleanField, ref getStaticBooleanField);
            }
            var ret = getStaticBooleanField.Invoke(this.NativePointer, clazz, fieldID);
            return ret;
        }

        public byte GetStaticByteField(IntPtr clazz, IntPtr fieldID)
        {
            if (getStaticByteField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStaticByteField, ref getStaticByteField);
            }
            var ret = getStaticByteField.Invoke(this.NativePointer, clazz, fieldID);
            return ret;
        }

        public ushort GetStaticCharField(IntPtr clazz, IntPtr fieldID)
        {
            if (getStaticCharField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStaticCharField, ref getStaticCharField);
            }
            var ret = getStaticCharField.Invoke(this.NativePointer, clazz, fieldID);
            return ret;
        }

        public short GetStaticShortField(IntPtr clazz, IntPtr fieldID)
        {
            if (getStaticShortField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStaticShortField, ref getStaticShortField);
            }
            var ret = getStaticShortField.Invoke(this.NativePointer, clazz, fieldID);
            return ret;
        }

        public int GetStaticIntField(IntPtr clazz, IntPtr fieldID)
        {
            if (getStaticIntField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStaticIntField, ref getStaticIntField);
            }
            var ret = getStaticIntField.Invoke(this.NativePointer, clazz, fieldID);
            return ret;
        }

        public long GetStaticLongField(IntPtr clazz, IntPtr fieldID)
        {
            if (getStaticLongField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStaticLongField, ref getStaticLongField);
            }
            var ret = getStaticLongField.Invoke(this.NativePointer, clazz, fieldID);
            return ret;
        }

        public float GetStaticFloatField(IntPtr clazz, IntPtr fieldID)
        {
            if (getStaticFloatField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStaticFloatField, ref getStaticFloatField);
            }
            var ret = getStaticFloatField.Invoke(this.NativePointer, clazz, fieldID);
            return ret;
        }

        public double GetStaticDoubleField(IntPtr clazz, IntPtr fieldID)
        {
            if (getStaticDoubleField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStaticDoubleField, ref getStaticDoubleField);
            }
            var ret = getStaticDoubleField.Invoke(this.NativePointer, clazz, fieldID);
            return ret;
        }

        public void SetStaticObjectField(IntPtr clazz, IntPtr fieldID, IntPtr value)
        {
            if (setStaticObjectField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetStaticObjectField, ref setStaticObjectField);
            }
            setStaticObjectField.Invoke(this.NativePointer, clazz, fieldID, value);
        }

        public void SetStaticBooleanField(IntPtr clazz, IntPtr fieldID, bool value)
        {
            if (setStaticBooleanField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetStaticBooleanField, ref setStaticBooleanField);
            }
            setStaticBooleanField.Invoke(this.NativePointer, clazz, fieldID, value);
        }

        public void SetStaticByteField(IntPtr clazz, IntPtr fieldID, byte value)
        {
            if (setStaticByteField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetStaticByteField, ref setStaticByteField);
            }
            setStaticByteField.Invoke(this.NativePointer, clazz, fieldID, value);
        }

        public void SetStaticCharField(IntPtr clazz, IntPtr fieldID, ushort value)
        {
            if (setStaticCharField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetStaticCharField, ref setStaticCharField);
            }
            setStaticCharField.Invoke(this.NativePointer, clazz, fieldID, value);
        }

        public void SetStaticShortField(IntPtr clazz, IntPtr fieldID, short value)
        {
            if (setStaticShortField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetStaticShortField, ref setStaticShortField);
            }
            setStaticShortField.Invoke(this.NativePointer, clazz, fieldID, value);
        }

        public void SetStaticIntField(IntPtr clazz, IntPtr fieldID, int value)
        {
            if (setStaticIntField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetStaticIntField, ref setStaticIntField);
            }
            setStaticIntField.Invoke(this.NativePointer, clazz, fieldID, value);
        }

        public void SetStaticLongField(IntPtr clazz, IntPtr fieldID, long value)
        {
            if (setStaticLongField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetStaticLongField, ref setStaticLongField);
            }
            setStaticLongField.Invoke(this.NativePointer, clazz, fieldID, value);
        }

        public void SetStaticFloatField(IntPtr clazz, IntPtr fieldID, float value)
        {
            if (setStaticFloatField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetStaticFloatField, ref setStaticFloatField);
            }
            setStaticFloatField.Invoke(this.NativePointer, clazz, fieldID, value);
        }

        public void SetStaticDoubleField(IntPtr clazz, IntPtr fieldID, double value)
        {
            if (setStaticDoubleField == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetStaticDoubleField, ref setStaticDoubleField);
            }
            setStaticDoubleField.Invoke(this.NativePointer, clazz, fieldID, value);
        }

        public IntPtr NewString(IntPtr unicode, IntPtr len)
        {
            if (newString == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewString, ref newString);
            }
            var ret = newString.Invoke(this.NativePointer, unicode, len);
            return ret;
        }

        public int GetStringLength(IntPtr str)
        {
            if (getStringLength == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStringLength, ref getStringLength);
            }
            var ret = getStringLength.Invoke(this.NativePointer, str);
            return ret;
        }

        public IntPtr GetStringChars(IntPtr str, byte* isCopy)
        {
            if (getStringChars == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStringChars, ref getStringChars);
            }
            var ret = getStringChars.Invoke(this.NativePointer, str, isCopy);
            return ret;
        }

        public void ReleaseStringChars(IntPtr str, IntPtr chars)
        {
            if (releaseStringChars == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ReleaseStringChars, ref releaseStringChars);
            }
            releaseStringChars.Invoke(this.NativePointer, str, chars);
        }

        public IntPtr NewStringUTF(IntPtr utf)
        {
            if (newStringUTF == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewStringUTF, ref newStringUTF);
            }
            var ret = newStringUTF.Invoke(this.NativePointer, utf);
            return ret;
        }

        public int GetStringUTFLength(IntPtr str)
        {
            if (getStringUTFLength == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStringUTFLength, ref getStringUTFLength);
            }
            var ret = getStringUTFLength.Invoke(this.NativePointer, str);
            return ret;
        }

        public IntPtr GetStringUTFChars(IntPtr str, byte* isCopy)
        {
            if (getStringUTFChars == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStringUTFChars, ref getStringUTFChars);
            }
            var ret = getStringUTFChars.Invoke(this.NativePointer, str, isCopy);
            return ret;
        }

        public void ReleaseStringUTFChars(IntPtr str, IntPtr chars)
        {
            if (releaseStringUTFChars == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ReleaseStringUTFChars, ref releaseStringUTFChars);
            }
            releaseStringUTFChars.Invoke(this.NativePointer, str, chars);
        }

        public int GetArrayLength(IntPtr array)
        {
            if (getArrayLength == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetArrayLength, ref getArrayLength);
            }
            var ret = getArrayLength.Invoke(this.NativePointer, array);
            return ret;
        }

        public IntPtr NewObjectArray(IntPtr len, IntPtr clazz, IntPtr init)
        {
            if (newObjectArray == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewObjectArray, ref newObjectArray);
            }
            var ret = newObjectArray.Invoke(this.NativePointer, len, clazz, init);
            return ret;
        }

        public IntPtr GetObjectArrayElement(IntPtr array, IntPtr index)
        {
            if (getObjectArrayElement == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetObjectArrayElement, ref getObjectArrayElement);
            }
            var ret = getObjectArrayElement.Invoke(this.NativePointer, array, index);
            return ret;
        }

        public void SetObjectArrayElement(IntPtr array, IntPtr index, IntPtr val)
        {
            if (setObjectArrayElement == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetObjectArrayElement, ref setObjectArrayElement);
            }
            setObjectArrayElement.Invoke(this.NativePointer, array, index, val);
        }

        public IntPtr NewBooleanArray(int len)
        {
            if (newBooleanArray == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewBooleanArray, ref newBooleanArray);
            }
            var ret = newBooleanArray.Invoke(this.NativePointer, len);
            return ret;
        }

        public IntPtr NewByteArray(int len)
        {
            if (newByteArray == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewByteArray, ref newByteArray);
            }
            var ret = newByteArray.Invoke(this.NativePointer, len);
            return ret;
        }

        public IntPtr NewCharArray(int len)
        {
            if (newCharArray == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewCharArray, ref newCharArray);
            }
            var ret = newCharArray.Invoke(this.NativePointer, len);
            return ret;
        }

        public IntPtr NewShortArray(int len)
        {
            if (newShortArray == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewShortArray, ref newShortArray);
            }
            var ret = newShortArray.Invoke(this.NativePointer, len);
            return ret;
        }

        public IntPtr NewIntArray(int len)
        {
            if (newIntArray == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewIntArray, ref newIntArray);
            }
            var ret = newIntArray.Invoke(this.NativePointer, len);
            return ret;
        }

        public IntPtr NewLongArray(int len)
        {
            if (newLongArray == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewLongArray, ref newLongArray);
            }
            var ret = newLongArray.Invoke(this.NativePointer, len);
            return ret;
        }

        public IntPtr NewFloatArray(int len)
        {
            if (newFloatArray == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewFloatArray, ref newFloatArray);
            }
            var ret = newFloatArray.Invoke(this.NativePointer, len);
            return ret;
        }

        public IntPtr NewDoubleArray(int len)
        {
            if (newDoubleArray == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewDoubleArray, ref newDoubleArray);
            }
            var ret = newDoubleArray.Invoke(this.NativePointer, len);
            return ret;
        }

        public IntPtr GetBooleanArrayElements(IntPtr array, byte* isCopy)
        {
            if (getBooleanArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetBooleanArrayElements, ref getBooleanArrayElements);
            }
            var ret = getBooleanArrayElements.Invoke(this.NativePointer, array, isCopy);
            return ret;
        }

        public IntPtr GetByteArrayElements(IntPtr array, byte* isCopy)
        {
            if (getByteArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetByteArrayElements, ref getByteArrayElements);
            }
            var ret = getByteArrayElements.Invoke(this.NativePointer, array, isCopy);
            return ret;
        }

        public IntPtr GetCharArrayElements(IntPtr array, byte* isCopy)
        {
            if (getCharArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetCharArrayElements, ref getCharArrayElements);
            }
            var ret = getCharArrayElements.Invoke(this.NativePointer, array, isCopy);
            return ret;
        }

        public IntPtr GetShortArrayElements(IntPtr array, byte* isCopy)
        {
            if (getShortArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetShortArrayElements, ref getShortArrayElements);
            }
            var ret = getShortArrayElements.Invoke(this.NativePointer, array, isCopy);
            return ret;
        }

        public IntPtr GetIntArrayElements(IntPtr array, byte* isCopy)
        {
            if (getIntArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetIntArrayElements, ref getIntArrayElements);
            }
            var ret = getIntArrayElements.Invoke(this.NativePointer, array, isCopy);
            return ret;
        }

        public IntPtr GetLongArrayElements(IntPtr array, byte* isCopy)
        {
            if (getLongArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetLongArrayElements, ref getLongArrayElements);
            }
            var ret = getLongArrayElements.Invoke(this.NativePointer, array, isCopy);
            return ret;
        }

        public IntPtr GetFloatArrayElements(IntPtr array, byte* isCopy)
        {
            if (getFloatArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetFloatArrayElements, ref getFloatArrayElements);
            }
            var ret = getFloatArrayElements.Invoke(this.NativePointer, array, isCopy);
            return ret;
        }

        public IntPtr GetDoubleArrayElements(IntPtr array, byte* isCopy)
        {
            if (getDoubleArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetDoubleArrayElements, ref getDoubleArrayElements);
            }
            var ret = getDoubleArrayElements.Invoke(this.NativePointer, array, isCopy);
            return ret;
        }

        public void ReleaseBooleanArrayElements(IntPtr array, bool* elems, IntPtr mode)
        {
            if (releaseBooleanArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ReleaseBooleanArrayElements, ref releaseBooleanArrayElements);
            }
            releaseBooleanArrayElements.Invoke(this.NativePointer, array, elems, mode);
        }

        public void ReleaseByteArrayElements(IntPtr array, byte* elems, IntPtr mode)
        {
            if (releaseByteArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ReleaseByteArrayElements, ref releaseByteArrayElements);
            }
            releaseByteArrayElements.Invoke(this.NativePointer, array, elems, mode);
        }

        public void ReleaseCharArrayElements(IntPtr array, ushort* elems, IntPtr mode)
        {
            if (releaseCharArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ReleaseCharArrayElements, ref releaseCharArrayElements);
            }
            releaseCharArrayElements.Invoke(this.NativePointer, array, elems, mode);
        }

        public void ReleaseShortArrayElements(IntPtr array, short* elems, IntPtr mode)
        {
            if (releaseShortArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ReleaseShortArrayElements, ref releaseShortArrayElements);
            }
            releaseShortArrayElements.Invoke(this.NativePointer, array, elems, mode);
        }

        public void ReleaseIntArrayElements(IntPtr array, int* elems, IntPtr mode)
        {
            if (releaseIntArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ReleaseIntArrayElements, ref releaseIntArrayElements);
            }
            releaseIntArrayElements.Invoke(this.NativePointer, array, elems, mode);
        }

        public void ReleaseLongArrayElements(IntPtr array, long* elems, IntPtr mode)
        {
            if (releaseLongArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ReleaseLongArrayElements, ref releaseLongArrayElements);
            }
            releaseLongArrayElements.Invoke(this.NativePointer, array, elems, mode);
        }

        public void ReleaseFloatArrayElements(IntPtr array, float* elems, IntPtr mode)
        {
            if (releaseFloatArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ReleaseFloatArrayElements, ref releaseFloatArrayElements);
            }
            releaseFloatArrayElements.Invoke(this.NativePointer, array, elems, mode);
        }

        public void ReleaseDoubleArrayElements(IntPtr array, double* elems, IntPtr mode)
        {
            if (releaseDoubleArrayElements == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ReleaseDoubleArrayElements, ref releaseDoubleArrayElements);
            }
            releaseDoubleArrayElements.Invoke(this.NativePointer, array, elems, mode);
        }

        public void GetBooleanArrayRegion(IntPtr array, IntPtr start, IntPtr l, IntPtr buf)
        {
            if (getBooleanArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetBooleanArrayRegion, ref getBooleanArrayRegion);
            }
            getBooleanArrayRegion.Invoke(this.NativePointer, array, start, l, buf);
        }

        public void GetByteArrayRegion(IntPtr array, IntPtr start, IntPtr len, IntPtr buf)
        {
            if (getByteArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetByteArrayRegion, ref getByteArrayRegion);
            }
            getByteArrayRegion.Invoke(this.NativePointer, array, start, len, buf);
        }

        public void GetCharArrayRegion(IntPtr array, IntPtr start, IntPtr len, IntPtr buf)
        {
            if (getCharArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetCharArrayRegion, ref getCharArrayRegion);
            }
            getCharArrayRegion.Invoke(this.NativePointer, array, start, len, buf);
        }

        public void GetShortArrayRegion(IntPtr array, IntPtr start, IntPtr len, IntPtr buf)
        {
            if (getShortArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetShortArrayRegion, ref getShortArrayRegion);
            }
            getShortArrayRegion.Invoke(this.NativePointer, array, start, len, buf);
        }

        public void GetIntArrayRegion(IntPtr array, IntPtr start, IntPtr len, IntPtr buf)
        {
            if (getIntArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetIntArrayRegion, ref getIntArrayRegion);
            }
            getIntArrayRegion.Invoke(this.NativePointer, array, start, len, buf);
        }

        public void GetLongArrayRegion(IntPtr array, IntPtr start, IntPtr len, IntPtr buf)
        {
            if (getLongArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetLongArrayRegion, ref getLongArrayRegion);
            }
            getLongArrayRegion.Invoke(this.NativePointer, array, start, len, buf);
        }

        public void GetFloatArrayRegion(IntPtr array, IntPtr start, IntPtr len, IntPtr buf)
        {
            if (getFloatArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetFloatArrayRegion, ref getFloatArrayRegion);
            }
            getFloatArrayRegion.Invoke(this.NativePointer, array, start, len, buf);
        }

        public void GetDoubleArrayRegion(IntPtr array, IntPtr start, IntPtr len, IntPtr buf)
        {
            if (getDoubleArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetDoubleArrayRegion, ref getDoubleArrayRegion);
            }
            getDoubleArrayRegion.Invoke(this.NativePointer, array, start, len, buf);
        }

        public void SetBooleanArrayRegion(IntPtr array, IntPtr start, IntPtr l, bool buf)
        {
            if (setBooleanArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetBooleanArrayRegion, ref setBooleanArrayRegion);
            }
            setBooleanArrayRegion.Invoke(this.NativePointer, array, start, l, buf);
        }

        public void SetByteArrayRegion(IntPtr array, IntPtr start, IntPtr len, byte buf)
        {
            if (setByteArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetByteArrayRegion, ref setByteArrayRegion);
            }
            setByteArrayRegion.Invoke(this.NativePointer, array, start, len, buf);
        }

        public void SetCharArrayRegion(IntPtr array, IntPtr start, IntPtr len, ushort buf)
        {
            if (setCharArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetCharArrayRegion, ref setCharArrayRegion);
            }
            setCharArrayRegion.Invoke(this.NativePointer, array, start, len, buf);
        }

        public void SetShortArrayRegion(IntPtr array, IntPtr start, IntPtr len, short buf)
        {
            if (setShortArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetShortArrayRegion, ref setShortArrayRegion);
            }
            setShortArrayRegion.Invoke(this.NativePointer, array, start, len, buf);
        }

        public void SetIntArrayRegion(IntPtr array, IntPtr start, IntPtr len, int buf)
        {
            if (setIntArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetIntArrayRegion, ref setIntArrayRegion);
            }
            setIntArrayRegion.Invoke(this.NativePointer, array, start, len, buf);
        }

        public void SetLongArrayRegion(IntPtr array, IntPtr start, IntPtr len, long buf)
        {
            if (setLongArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetLongArrayRegion, ref setLongArrayRegion);
            }
            setLongArrayRegion.Invoke(this.NativePointer, array, start, len, buf);
        }

        public void SetFloatArrayRegion(IntPtr array, IntPtr start, IntPtr len, float buf)
        {
            if (setFloatArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetFloatArrayRegion, ref setFloatArrayRegion);
            }
            setFloatArrayRegion.Invoke(this.NativePointer, array, start, len, buf);
        }

        public void SetDoubleArrayRegion(IntPtr array, IntPtr start, IntPtr len, double buf)
        {
            if (setDoubleArrayRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.SetDoubleArrayRegion, ref setDoubleArrayRegion);
            }
            setDoubleArrayRegion.Invoke(this.NativePointer, array, start, len, buf);
        }

        public IntPtr RegisterNatives(IntPtr clazz, IntPtr methods, IntPtr nMethods)
        {
            if (registerNatives == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.RegisterNatives, ref registerNatives);
            }
            var ret = registerNatives.Invoke(this.NativePointer, clazz, methods, nMethods);
            return ret;
        }

        public IntPtr UnregisterNatives(IntPtr clazz)
        {
            if (unregisterNatives == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.UnregisterNatives, ref unregisterNatives);
            }
            var ret = unregisterNatives.Invoke(this.NativePointer, clazz);
            return ret;
        }

        public IntPtr MonitorEnter(IntPtr obj)
        {
            if (monitorEnter == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.MonitorEnter, ref monitorEnter);
            }
            var ret = monitorEnter.Invoke(this.NativePointer, obj);
            return ret;
        }

        public IntPtr MonitorExit(IntPtr obj)
        {
            if (monitorExit == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.MonitorExit, ref monitorExit);
            }
            var ret = monitorExit.Invoke(this.NativePointer, obj);
            return ret;
        }

        public IntPtr GetJavaVM(out IntPtr vm)
        {
            if (getJavaVM == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetJavaVM, ref getJavaVM);
            }
            var ret = getJavaVM.Invoke(this.NativePointer, out vm);
            return ret;
        }

        public void GetStringRegion(IntPtr str, IntPtr start, IntPtr len, IntPtr buf)
        {
            if (getStringRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStringRegion, ref getStringRegion);
            }
            getStringRegion.Invoke(this.NativePointer, str, start, len, buf);
        }

        public void GetStringUTFRegion(IntPtr str, IntPtr start, IntPtr len, IntPtr buf)
        {
            if (getStringUTFRegion == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStringUTFRegion, ref getStringUTFRegion);
            }
            getStringUTFRegion.Invoke(this.NativePointer, str, start, len, buf);
        }

        public void GetPrimitiveArrayCritical(IntPtr array, byte* isCopy)
        {
            if (getPrimitiveArrayCritical == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetPrimitiveArrayCritical, ref getPrimitiveArrayCritical);
            }
            getPrimitiveArrayCritical.Invoke(this.NativePointer, array, isCopy);
        }

        public void ReleasePrimitiveArrayCritical(IntPtr array, IntPtr carray, IntPtr mode)
        {
            if (releasePrimitiveArrayCritical == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ReleasePrimitiveArrayCritical, ref releasePrimitiveArrayCritical);
            }
            releasePrimitiveArrayCritical.Invoke(this.NativePointer, array, carray, mode);
        }

        public IntPtr GetStringCritical(IntPtr str, byte* isCopy)
        {
            if (getStringCritical == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetStringCritical, ref getStringCritical);
            }
            var ret = getStringCritical.Invoke(this.NativePointer, str, isCopy);
            return ret;
        }

        public void ReleaseStringCritical(IntPtr str, IntPtr cstring)
        {
            if (releaseStringCritical == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ReleaseStringCritical, ref releaseStringCritical);
            }
            releaseStringCritical.Invoke(this.NativePointer, str, cstring);
        }

        public IntPtr NewWeakGlobalRef(IntPtr obj)
        {
            if (newWeakGlobalRef == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewWeakGlobalRef, ref newWeakGlobalRef);
            }
            var ret = newWeakGlobalRef.Invoke(this.NativePointer, obj);
            return ret;
        }

        public void DeleteWeakGlobalRef(IntPtr reference)
        {
            if (deleteWeakGlobalRef == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.DeleteWeakGlobalRef, ref deleteWeakGlobalRef);
            }
            deleteWeakGlobalRef.Invoke(this.NativePointer, reference);
        }

        public IntPtr ExceptionCheck()
        {
            if (exceptionCheck == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.ExceptionCheck, ref exceptionCheck);
            }
            var ret = exceptionCheck.Invoke(this.NativePointer);
            return ret;
        }

        public IntPtr NewDirectByteBuffer(IntPtr address, byte capacity)
        {
            if (newDirectByteBuffer == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.NewDirectByteBuffer, ref newDirectByteBuffer);
            }
            var ret = newDirectByteBuffer.Invoke(this.NativePointer, address, capacity);
            return ret;
        }

        public void* GetDirectBufferAddress(IntPtr buf)
        {
            if (getDirectBufferAddress == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetDirectBufferAddress, ref getDirectBufferAddress);
            }
            var ret = getDirectBufferAddress.Invoke(this.NativePointer, buf);
            return ret;
        }

        public IntPtr GetDirectBufferCapacity(IntPtr buf)
        {
            if (getDirectBufferCapacity == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetDirectBufferCapacity, ref getDirectBufferCapacity);
            }
            var ret = getDirectBufferCapacity.Invoke(this.NativePointer, buf);
            return ret;
        }

        public IntPtr GetObjectRefType(IntPtr obj)
        {
            if (getObjectRefType == null)
            {
                JavaConverter.GetDelegateForFunctionPointer(this.NativeInterface.GetObjectRefType, ref getObjectRefType);
            }
            var ret = getObjectRefType.Invoke(this.NativePointer, obj);
            return ret;
        }

        internal JNINativeInterface.GetVersion getVersion;
        internal JNINativeInterface.DefineClass defineClass;
        internal JNINativeInterface.FindClass findClass;
        internal JNINativeInterface.FromReflectedMethod fromReflectedMethod;
        internal JNINativeInterface.FromReflectedField fromReflectedField;
        internal JNINativeInterface.ToReflectedMethod toReflectedMethod;
        internal JNINativeInterface.GetSuperclass getSuperclass;
        internal JNINativeInterface.IsAssignableFrom isAssignableFrom;
        internal JNINativeInterface.ToReflectedField toReflectedField;
        internal JNINativeInterface.Throw _throw;
        internal JNINativeInterface.ThrowNew throwNew;
        internal JNINativeInterface.ExceptionOccurred exceptionOccurred;
        internal JNINativeInterface.ExceptionDescribe exceptionDescribe;
        internal JNINativeInterface.ExceptionClear exceptionClear;
        internal JNINativeInterface.FatalError fatalError;
        internal JNINativeInterface.PushLocalFrame pushLocalFrame;
        internal JNINativeInterface.PopLocalFrame popLocalFrame;
        internal JNINativeInterface.NewGlobalRef newGlobalRef;
        internal JNINativeInterface.DeleteGlobalRef deleteGlobalRef;
        internal JNINativeInterface.DeleteLocalRef deleteLocalRef;
        internal JNINativeInterface.IsSameObject isSameObject;
        internal JNINativeInterface.NewLocalRef newLocalRef;
        internal JNINativeInterface.EnsureLocalCapacity ensureLocalCapacity;
        internal JNINativeInterface.AllocObject allocObject;
        internal JNINativeInterface.NewObject newObject;
        internal JNINativeInterface.GetObjectClass getObjectClass;
        internal JNINativeInterface.IsInstanceOf isInstanceOf;
        internal JNINativeInterface.GetMethodID getMethodID;
        internal JNINativeInterface.CallObjectMethod callObjectMethod;
        internal JNINativeInterface.CallBooleanMethod callBooleanMethod;
        internal JNINativeInterface.CallByteMethod callByteMethod;
        internal JNINativeInterface.CallCharMethod callCharMethod;
        internal JNINativeInterface.CallShortMethod callShortMethod;
        internal JNINativeInterface.CallIntMethod callIntMethod;
        internal JNINativeInterface.CallLongMethod callLongMethod;
        internal JNINativeInterface.CallFloatMethod callFloatMethod;
        internal JNINativeInterface.CallDoubleMethod callDoubleMethod;
        internal JNINativeInterface.CallVoidMethod callVoidMethod;
        internal JNINativeInterface.CallNonvirtualObjectMethod callNonvirtualObjectMethod;
        internal JNINativeInterface.CallNonvirtualBooleanMethod callNonvirtualBooleanMethod;
        internal JNINativeInterface.CallNonvirtualByteMethod callNonvirtualByteMethod;
        internal JNINativeInterface.CallNonvirtualCharMethod callNonvirtualCharMethod;
        internal JNINativeInterface.CallNonvirtualShortMethod callNonvirtualShortMethod;
        internal JNINativeInterface.CallNonvirtualIntMethod callNonvirtualIntMethod;
        internal JNINativeInterface.CallNonvirtualLongMethod callNonvirtualLongMethod;
        internal JNINativeInterface.CallNonvirtualFloatMethod callNonvirtualFloatMethod;
        internal JNINativeInterface.CallNonvirtualDoubleMethod callNonvirtualDoubleMethod;
        internal JNINativeInterface.CallNonvirtualVoidMethod callNonvirtualVoidMethod;
        internal JNINativeInterface.GetFieldID getFieldID;
        internal JNINativeInterface.GetObjectField getObjectField;
        internal JNINativeInterface.GetBooleanField getBooleanField;
        internal JNINativeInterface.GetByteField getByteField;
        internal JNINativeInterface.GetCharField getCharField;
        internal JNINativeInterface.GetShortField getShortField;
        internal JNINativeInterface.GetIntField getIntField;
        internal JNINativeInterface.GetLongField getLongField;
        internal JNINativeInterface.GetFloatField getFloatField;
        internal JNINativeInterface.GetDoubleField getDoubleField;
        internal JNINativeInterface.SetObjectField setObjectField;
        internal JNINativeInterface.SetBooleanField setBooleanField;
        internal JNINativeInterface.SetByteField setByteField;
        internal JNINativeInterface.SetCharField setCharField;
        internal JNINativeInterface.SetShortField setShortField;
        internal JNINativeInterface.SetIntField setIntField;
        internal JNINativeInterface.SetLongField setLongField;
        internal JNINativeInterface.SetFloatField setFloatField;
        internal JNINativeInterface.SetDoubleField setDoubleField;
        internal JNINativeInterface.GetStaticMethodID getStaticMethodID;
        internal JNINativeInterface.CallStaticObjectMethod callStaticObjectMethod;
        internal JNINativeInterface.CallStaticBooleanMethod callStaticBooleanMethod;
        internal JNINativeInterface.CallStaticByteMethod callStaticByteMethod;
        internal JNINativeInterface.CallStaticCharMethod callStaticCharMethod;
        internal JNINativeInterface.CallStaticShortMethod callStaticShortMethod;
        internal JNINativeInterface.CallStaticIntMethod callStaticIntMethod;
        internal JNINativeInterface.CallStaticLongMethod callStaticLongMethod;
        internal JNINativeInterface.CallStaticFloatMethod callStaticFloatMethod;
        internal JNINativeInterface.CallStaticDoubleMethod callStaticDoubleMethod;
        internal JNINativeInterface.CallStaticVoidMethod callStaticVoidMethod;
        internal JNINativeInterface.GetStaticFieldID getStaticFieldID;
        internal JNINativeInterface.GetStaticObjectField getStaticObjectField;
        internal JNINativeInterface.GetStaticBooleanField getStaticBooleanField;
        internal JNINativeInterface.GetStaticByteField getStaticByteField;
        internal JNINativeInterface.GetStaticCharField getStaticCharField;
        internal JNINativeInterface.GetStaticShortField getStaticShortField;
        internal JNINativeInterface.GetStaticIntField getStaticIntField;
        internal JNINativeInterface.GetStaticLongField getStaticLongField;
        internal JNINativeInterface.GetStaticFloatField getStaticFloatField;
        internal JNINativeInterface.GetStaticDoubleField getStaticDoubleField;
        internal JNINativeInterface.SetStaticObjectField setStaticObjectField;
        internal JNINativeInterface.SetStaticBooleanField setStaticBooleanField;
        internal JNINativeInterface.SetStaticByteField setStaticByteField;
        internal JNINativeInterface.SetStaticCharField setStaticCharField;
        internal JNINativeInterface.SetStaticShortField setStaticShortField;
        internal JNINativeInterface.SetStaticIntField setStaticIntField;
        internal JNINativeInterface.SetStaticLongField setStaticLongField;
        internal JNINativeInterface.SetStaticFloatField setStaticFloatField;
        internal JNINativeInterface.SetStaticDoubleField setStaticDoubleField;
        internal JNINativeInterface.NewString newString;
        internal JNINativeInterface.GetStringLength getStringLength;
        internal JNINativeInterface.GetStringChars getStringChars;
        internal JNINativeInterface.ReleaseStringChars releaseStringChars;
        internal JNINativeInterface.NewStringUTF newStringUTF;
        internal JNINativeInterface.GetStringUTFLength getStringUTFLength;
        internal JNINativeInterface.GetStringUTFChars getStringUTFChars;
        internal JNINativeInterface.ReleaseStringUTFChars releaseStringUTFChars;
        internal JNINativeInterface.GetArrayLength getArrayLength;
        internal JNINativeInterface.NewObjectArray newObjectArray;
        internal JNINativeInterface.GetObjectArrayElement getObjectArrayElement;
        internal JNINativeInterface.SetObjectArrayElement setObjectArrayElement;
        internal JNINativeInterface.NewBooleanArray newBooleanArray;
        internal JNINativeInterface.NewByteArray newByteArray;
        internal JNINativeInterface.NewCharArray newCharArray;
        internal JNINativeInterface.NewShortArray newShortArray;
        internal JNINativeInterface.NewIntArray newIntArray;
        internal JNINativeInterface.NewLongArray newLongArray;
        internal JNINativeInterface.NewFloatArray newFloatArray;
        internal JNINativeInterface.NewDoubleArray newDoubleArray;
        internal JNINativeInterface.GetBooleanArrayElements getBooleanArrayElements;
        internal JNINativeInterface.GetByteArrayElements getByteArrayElements;
        internal JNINativeInterface.GetCharArrayElements getCharArrayElements;
        internal JNINativeInterface.GetShortArrayElements getShortArrayElements;
        internal JNINativeInterface.GetIntArrayElements getIntArrayElements;
        internal JNINativeInterface.GetLongArrayElements getLongArrayElements;
        internal JNINativeInterface.GetFloatArrayElements getFloatArrayElements;
        internal JNINativeInterface.GetDoubleArrayElements getDoubleArrayElements;
        internal JNINativeInterface.ReleaseBooleanArrayElements releaseBooleanArrayElements;
        internal JNINativeInterface.ReleaseByteArrayElements releaseByteArrayElements;
        internal JNINativeInterface.ReleaseCharArrayElements releaseCharArrayElements;
        internal JNINativeInterface.ReleaseShortArrayElements releaseShortArrayElements;
        internal JNINativeInterface.ReleaseIntArrayElements releaseIntArrayElements;
        internal JNINativeInterface.ReleaseLongArrayElements releaseLongArrayElements;
        internal JNINativeInterface.ReleaseFloatArrayElements releaseFloatArrayElements;
        internal JNINativeInterface.ReleaseDoubleArrayElements releaseDoubleArrayElements;
        internal JNINativeInterface.GetBooleanArrayRegion getBooleanArrayRegion;
        internal JNINativeInterface.GetByteArrayRegion getByteArrayRegion;
        internal JNINativeInterface.GetCharArrayRegion getCharArrayRegion;
        internal JNINativeInterface.GetShortArrayRegion getShortArrayRegion;
        internal JNINativeInterface.GetIntArrayRegion getIntArrayRegion;
        internal JNINativeInterface.GetLongArrayRegion getLongArrayRegion;
        internal JNINativeInterface.GetFloatArrayRegion getFloatArrayRegion;
        internal JNINativeInterface.GetDoubleArrayRegion getDoubleArrayRegion;
        internal JNINativeInterface.SetBooleanArrayRegion setBooleanArrayRegion;
        internal JNINativeInterface.SetByteArrayRegion setByteArrayRegion;
        internal JNINativeInterface.SetCharArrayRegion setCharArrayRegion;
        internal JNINativeInterface.SetShortArrayRegion setShortArrayRegion;
        internal JNINativeInterface.SetIntArrayRegion setIntArrayRegion;
        internal JNINativeInterface.SetLongArrayRegion setLongArrayRegion;
        internal JNINativeInterface.SetFloatArrayRegion setFloatArrayRegion;
        internal JNINativeInterface.SetDoubleArrayRegion setDoubleArrayRegion;
        internal JNINativeInterface.RegisterNatives registerNatives;
        internal JNINativeInterface.UnregisterNatives unregisterNatives;
        internal JNINativeInterface.MonitorEnter monitorEnter;
        internal JNINativeInterface.MonitorExit monitorExit;
        internal JNINativeInterface.GetJavaVM getJavaVM;
        internal JNINativeInterface.GetStringRegion getStringRegion;
        internal JNINativeInterface.GetStringUTFRegion getStringUTFRegion;
        internal JNINativeInterface.GetPrimitiveArrayCritical getPrimitiveArrayCritical;
        internal JNINativeInterface.ReleasePrimitiveArrayCritical releasePrimitiveArrayCritical;
        internal JNINativeInterface.GetStringCritical getStringCritical;
        internal JNINativeInterface.ReleaseStringCritical releaseStringCritical;
        internal JNINativeInterface.NewWeakGlobalRef newWeakGlobalRef;
        internal JNINativeInterface.DeleteWeakGlobalRef deleteWeakGlobalRef;
        internal JNINativeInterface.ExceptionCheck exceptionCheck;
        internal JNINativeInterface.NewDirectByteBuffer newDirectByteBuffer;
        internal JNINativeInterface.GetDirectBufferAddress getDirectBufferAddress;
        internal JNINativeInterface.GetDirectBufferCapacity getDirectBufferCapacity;
        internal JNINativeInterface.GetObjectRefType getObjectRefType;
    }
}
