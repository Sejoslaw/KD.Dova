using KD.Dova.Extensions;
using System;
using System.Collections.Generic;
using System.IO;

namespace KD.Dova.Generator.Generators
{
    /// <summary>
    /// Used to generate basic structure files.
    /// </summary>
    internal class BasicStructuresGenerator : IGenerator
    {
        private class StructureDefinition
        {
            public string StructureName { get; set; }
            public ICollection<Tuple<string, string>> Fields { get; set; }

            public StructureDefinition()
            {
                this.Fields = new List<Tuple<string, string>>();
            }

            public List<string> ToFileDefinition()
            {
                List<string> fileLines = new List<string>();

                // File definition
                fileLines.Add("// This file has been machine generated.");
                fileLines.Add("// Generated by: KD.Dova.Generator");
                fileLines.Add("// For more information go to: https://github.com/Sejoslaw/KD.Dova");
                fileLines.Add("");
                fileLines.Add("");
                fileLines.Add("using System;");
                fileLines.Add("");
                fileLines.Add("namespace KD.Dova.Natives.Structures");
                fileLines.Add("{");
                fileLines.Add($"    public struct { this.StructureName }");
                fileLines.Add("    {");

                foreach (var fieldDef in this.Fields)
                {
                    fileLines.Add($"        public { fieldDef.Item1 } { fieldDef.Item2 };");
                }

                fileLines.Add("    }");
                fileLines.Add("}");

                return fileLines;
            }
        }

        private static string POINTER = "IntPtr";

        public void Generate(string[] lines)
        {
            string lineBeginning = "typedef struct ";

            for (int i = 0; i < lines.Length; ++i)
            {
                string line = lines[i];

                if (line.StartsWith(lineBeginning) && !line.EndsWith(";"))
                {
                    StructureDefinition def = new StructureDefinition();

                    int fieldIndex = i + 1; // set to first property
                    string fieldDef = lines[fieldIndex];

                    // Read structure properties.
                    while (!fieldDef.StartsWith("}"))
                    {
                        if (!string.IsNullOrEmpty(fieldDef))
                        {
                            string fieldType = this.ParseFieldType(fieldDef);
                            string fieldName = this.ParseFieldName(fieldDef);

                            def.Fields.Add(new Tuple<string, string>(fieldType, fieldName));
                        }

                        fieldIndex++;
                        fieldDef = lines[fieldIndex];
                    }

                    i = fieldIndex + 1;
                    def.StructureName = this.ParseStructureName(fieldDef);

                    this.GenerateFile(def);
                }
            }
        }

        private void GenerateFile(StructureDefinition def)
        {
            List<string> lines = def.ToFileDefinition();
            string path = Path.Combine(GeneratorFactory.Instance.OutputDirectory, $"{ def.StructureName }.cs");

            File.WriteAllLines(path, lines.ToArray());
        }

        private string ParseStructureName(string line)
        {
            string trimmed = line.Trim().Replace(" ", "");
            trimmed = trimmed.Substring(1, trimmed.Length - 2);
            return trimmed;
        }

        private string ParseFieldName(string line)
        {
            string fieldName = line.Trim();

            if (fieldName.Contains(" "))
            {
                fieldName = fieldName.Split(" ")[1].Trim();
            }

            if (fieldName.StartsWith("*"))
            {
                fieldName = fieldName.Substring(1);
            }

            // Remove ";"
            fieldName = fieldName.Substring(0, fieldName.Length - 1);

            return fieldName;
        }

        /// <summary>
        /// This should return C# type.
        /// </summary>
        /// <param name="line"></param>
        /// <returns></returns>
        private string ParseFieldType(string line)
        {
            string fieldType = line.Trim();

            if (fieldType.Contains("*")) // Pointer
            {
                fieldType = fieldType.Replace(" ", "");

                string pointerType = fieldType.Split("*")[0];

                if (pointerType.IsPrimitive())
                {
                    return POINTER;
                }
                else
                {
                    return pointerType;
                }
            }
            else if (fieldType.StartsWith("j")) // Java primitive
            {
                return POINTER;
            }
            else // C primitive
            {
                string primitiveType = fieldType.Split("*")[0];
                return primitiveType;
            }
        }
    }
}
